import { GoogleGenAI, Modality } from "@google/genai";
import { blobToBase64 } from "../utils/fileUtils";

// Free-tier safe: no API key needed
const ai = new GoogleGenAI(); // free-tier mode

// Image part type
interface ImagePart {
  inlineData: {
    data: string; 
    mimeType: string;
  };
}

// Text part type
interface TextPart { text: string; }
type ContentPart = ImagePart | TextPart;

// Main image generation function
export const generateImage = async (files: File[], prompt: string): Promise<string> => {
  try {
    // Convert uploaded files to base64
    const imageParts: Promise<ImagePart>[] = files.map(async (file) => ({
      inlineData: { data: await blobToBase64(file), mimeType: file.type }
    }));

    const resolvedImageParts = await Promise.all(imageParts);
    const textPart: TextPart = { text: prompt };
    const allParts: ContentPart[] = [...resolvedImageParts, textPart];

    // Call Gemini free-tier model
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: { parts: allParts },
      config: { responseModalities: [Modality.IMAGE] }
    });

    // Extract generated image
    const firstCandidate = response.candidates?.[0];
    if (firstCandidate?.content?.parts) {
      for (const part of firstCandidate.content.parts) {
        if (part.inlineData) {
          const base64ImageBytes: string = part.inlineData.data;
          const mimeType = part.inlineData.mimeType || 'image/png';
          return `data:${mimeType};base64,${base64ImageBytes}`;
        }
      }
    }

    // If no image returned
    throw new Error("No image generated by Gemini API.");

  } catch (err) {
    console.error("Gemini API error:", err);
    throw new Error("Gemini API error: " + (err instanceof Error ? err.message : String(err)));
  }
};
